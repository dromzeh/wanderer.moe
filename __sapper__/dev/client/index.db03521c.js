import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, w as validate_each_argument, v as validate_slots, e as element, a as space, t as text, f as claim_element, h as children, c as claim_space, j as claim_text, b as detach_dev, m as src_url_equal, k as attr_dev, l as add_location, n as insert_hydration_dev, p as append_hydration_dev, u as noop, q as query_selector_all, x as destroy_each } from './client.ac88a3d9.js';

/* src\routes\characters\index.svelte generated by Svelte v3.48.0 */

const file = "src\\routes\\characters\\index.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[2] = list[i];
	return child_ctx;
}

// (31:8) {#each allCharacters as character}
function create_each_block(ctx) {
	let div;
	let a;
	let img0;
	let img0_src_value;
	let t0;
	let img1;
	let img1_src_value;
	let t1;
	let p0;
	let t2_value = /*character*/ ctx[2].name + "";
	let t2;
	let t3;
	let p1;
	let t4_value = ('‚≠ê').repeat(/*character*/ ctx[2].rarity) + "";
	let t4;
	let t5;

	const block = {
		c: function create() {
			div = element("div");
			a = element("a");
			img0 = element("img");
			t0 = space();
			img1 = element("img");
			t1 = space();
			p0 = element("p");
			t2 = text(t2_value);
			t3 = space();
			p1 = element("p");
			t4 = text(t4_value);
			t5 = space();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			a = claim_element(div_nodes, "A", { href: true });
			var a_nodes = children(a);
			img0 = claim_element(a_nodes, "IMG", { src: true, alt: true, class: true });
			t0 = claim_space(a_nodes);

			img1 = claim_element(a_nodes, "IMG", {
				class: true,
				loading: true,
				src: true,
				alt: true
			});

			t1 = claim_space(a_nodes);
			p0 = claim_element(a_nodes, "P", { class: true });
			var p0_nodes = children(p0);
			t2 = claim_text(p0_nodes, t2_value);
			p0_nodes.forEach(detach_dev);
			t3 = claim_space(a_nodes);
			p1 = claim_element(a_nodes, "P", { class: true });
			var p1_nodes = children(p1);
			t4 = claim_text(p1_nodes, t4_value);
			p1_nodes.forEach(detach_dev);
			a_nodes.forEach(detach_dev);
			t5 = claim_space(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			if (!src_url_equal(img0.src, img0_src_value = "./images/elements/" + /*character*/ ctx[2].element + ".png")) attr_dev(img0, "src", img0_src_value);
			attr_dev(img0, "alt", "" + (/*character*/ ctx[2].element + " symbol"));
			attr_dev(img0, "class", "absolute w-8 top-1 left-1");
			add_location(img0, file, 33, 12, 1134);
			attr_dev(img1, "class", "h-32 w-32 align-center");
			attr_dev(img1, "loading", "lazy");
			if (!src_url_equal(img1.src, img1_src_value = "./images/characters/" + /*character*/ ctx[2].name.replace(/\s+/g, '-').toLowerCase() + "/icon-front.png")) attr_dev(img1, "src", img1_src_value);
			attr_dev(img1, "alt", "Portrait image of " + /*character*/ ctx[2].name);
			add_location(img1, file, 34, 12, 1268);
			attr_dev(p0, "class", "text-sm text-center");
			add_location(p0, file, 35, 12, 1473);
			attr_dev(p1, "class", "text-xs text-center");
			add_location(p1, file, 36, 12, 1540);
			attr_dev(a, "href", "/characters/" + /*character*/ ctx[2].name.replace(/\s+/g, '-').toLowerCase());
			add_location(a, file, 32, 8, 1046);
			attr_dev(div, "class", "bg-gray-800 hover:scale-105 p-4 rounded-lg justify-center text-gray-400 font-semibold hover:text-white flex flex-row relative");
			add_location(div, file, 31, 8, 895);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, div, anchor);
			append_hydration_dev(div, a);
			append_hydration_dev(a, img0);
			append_hydration_dev(a, t0);
			append_hydration_dev(a, img1);
			append_hydration_dev(a, t1);
			append_hydration_dev(a, p0);
			append_hydration_dev(p0, t2);
			append_hydration_dev(a, t3);
			append_hydration_dev(a, p1);
			append_hydration_dev(p1, t4);
			append_hydration_dev(div, t5);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(31:8) {#each allCharacters as character}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t0;
	let div2;
	let section;
	let div1;
	let h1;
	let t1;
	let t2;
	let p;
	let t3;
	let t4;
	let br;
	let t5;
	let div0;
	let each_value = /*allCharacters*/ ctx[0];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			t0 = space();
			div2 = element("div");
			section = element("section");
			div1 = element("div");
			h1 = element("h1");
			t1 = text("Character Index");
			t2 = space();
			p = element("p");
			t3 = text("List of all Playable Characters");
			t4 = space();
			br = element("br");
			t5 = space();
			div0 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all('[data-svelte=\"svelte-clx493\"]', document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			div2 = claim_element(nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			section = claim_element(div2_nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			div1 = claim_element(section_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			h1 = claim_element(div1_nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			t1 = claim_text(h1_nodes, "Character Index");
			h1_nodes.forEach(detach_dev);
			t2 = claim_space(div1_nodes);
			p = claim_element(div1_nodes, "P", { class: true });
			var p_nodes = children(p);
			t3 = claim_text(p_nodes, "List of all Playable Characters");
			p_nodes.forEach(detach_dev);
			t4 = claim_space(div1_nodes);
			br = claim_element(div1_nodes, "BR", {});
			t5 = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div0_nodes);
			}

			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			section_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "characters | wanderer.moe - a genshin database";
			attr_dev(h1, "class", "text-white font-semibold gifont");
			add_location(h1, file, 23, 1, 536);
			attr_dev(p, "class", "text-gray-400");
			add_location(p, file, 24, 4, 608);
			add_location(br, file, 25, 1, 673);
			attr_dev(div0, "class", "grid grid-cols-2 md:grid-cols-6 lg:grid-cols-8 gap-3");
			add_location(div0, file, 29, 4, 775);
			attr_dev(div1, "class", "container px-4 mx-auto");
			add_location(div1, file, 22, 1, 497);
			attr_dev(section, "class", "py-24 md:py-40");
			add_location(section, file, 21, 0, 462);
			attr_dev(div2, "class", "flex flex-col min-h-screen");
			add_location(div2, file, 20, 0, 418);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, t0, anchor);
			insert_hydration_dev(target, div2, anchor);
			append_hydration_dev(div2, section);
			append_hydration_dev(section, div1);
			append_hydration_dev(div1, h1);
			append_hydration_dev(h1, t1);
			append_hydration_dev(div1, t2);
			append_hydration_dev(div1, p);
			append_hydration_dev(p, t3);
			append_hydration_dev(div1, t4);
			append_hydration_dev(div1, br);
			append_hydration_dev(div1, t5);
			append_hydration_dev(div1, div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div0, null);
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*allCharacters*/ 1) {
				each_value = /*allCharacters*/ ctx[0];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div0, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div2);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

async function preload(page) {
	const data = await Promise.all([import('./allCharacters.9d241d8c.js'), ]).then(function(x) { return x[0]; });
	return { data }; // id will be returned for displaying images..
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Characters', slots, []);
	let { data } = $$props;
	let allCharacters = data.characters;
	const writable_props = ['data'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Characters> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('data' in $$props) $$invalidate(1, data = $$props.data);
	};

	$$self.$capture_state = () => ({ preload, data, allCharacters });

	$$self.$inject_state = $$props => {
		if ('data' in $$props) $$invalidate(1, data = $$props.data);
		if ('allCharacters' in $$props) $$invalidate(0, allCharacters = $$props.allCharacters);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [allCharacters, data];
}

class Characters extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { data: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Characters",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*data*/ ctx[1] === undefined && !('data' in props)) {
			console.warn("<Characters> was created without expected prop 'data'");
		}
	}

	get data() {
		throw new Error("<Characters>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set data(value) {
		throw new Error("<Characters>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { Characters as default, preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguZGIwMzUyMWMuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvY2hhcmFjdGVycy9pbmRleC5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdCBjb250ZXh0PVwibW9kdWxlXCI+XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwcmVsb2FkKHBhZ2UpIHtcclxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBpbXBvcnQoYC4uLy4uL2RhdGEvYWxsQ2hhcmFjdGVycy5qc29uYCk7XHJcblxyXG4gICAgcmV0dXJuIHsgZGF0YSB9OyAvLyBpZCB3aWxsIGJlIHJldHVybmVkIGZvciBkaXNwbGF5aW5nIGltYWdlcy4uXHJcbn1cclxuPC9zY3JpcHQ+XHJcblxyXG48c2NyaXB0PlxyXG5leHBvcnQgbGV0IGRhdGE7XHJcbmxldCBhbGxDaGFyYWN0ZXJzID0gZGF0YS5jaGFyYWN0ZXJzO1xyXG48L3NjcmlwdD5cclxuXHJcbjxzdHlsZT5cclxuPC9zdHlsZT5cclxuXHJcbjxzdmVsdGU6aGVhZD5cclxuICAgIDx0aXRsZT5jaGFyYWN0ZXJzIHwgd2FuZGVyZXIubW9lIC0gYSBnZW5zaGluIGRhdGFiYXNlPC90aXRsZT5cclxuPC9zdmVsdGU6aGVhZD5cclxuXHJcbjxkaXYgY2xhc3MgPSBcImZsZXggZmxleC1jb2wgbWluLWgtc2NyZWVuXCI+XHJcbjxzZWN0aW9uIGNsYXNzPVwicHktMjQgbWQ6cHktNDBcIj5cclxuXHQ8ZGl2IGNsYXNzPVwiY29udGFpbmVyIHB4LTQgbXgtYXV0b1wiPlxyXG5cdDxoMSBjbGFzcyA9IFwidGV4dC13aGl0ZSBmb250LXNlbWlib2xkIGdpZm9udFwiPkNoYXJhY3RlciBJbmRleDwvaDE+XHJcbiAgICA8cCBjbGFzcyA9IFwidGV4dC1ncmF5LTQwMFwiPkxpc3Qgb2YgYWxsIFBsYXlhYmxlIENoYXJhY3RlcnM8L3A+XHJcblx0PGJyPlxyXG5cclxuICAgIDwhLS0gY2hhcmFjdGVyIGNhcmRzIC0tPlxyXG4gICAgPCEtLSB0b2RvOiBjaGFuZ2UgdGhpcyBsYXlvdXQgbWF5YmUgaW4gdGhlIGZ1dHVyZT8gLS0+XHJcbiAgICA8ZGl2IGNsYXNzPVwiZ3JpZCBncmlkLWNvbHMtMiBtZDpncmlkLWNvbHMtNiBsZzpncmlkLWNvbHMtOCBnYXAtM1wiPlxyXG4gICAgICAgIHsjZWFjaCBhbGxDaGFyYWN0ZXJzIGFzIGNoYXJhY3Rlcn1cclxuICAgICAgICA8ZGl2IGNsYXNzID0gXCJiZy1ncmF5LTgwMCBob3ZlcjpzY2FsZS0xMDUgcC00IHJvdW5kZWQtbGcganVzdGlmeS1jZW50ZXIgdGV4dC1ncmF5LTQwMCBmb250LXNlbWlib2xkIGhvdmVyOnRleHQtd2hpdGUgZmxleCBmbGV4LXJvdyByZWxhdGl2ZVwiPlxyXG4gICAgICAgIDxhIGhyZWY9XCIvY2hhcmFjdGVycy97Y2hhcmFjdGVyLm5hbWUucmVwbGFjZSgvXFxzKy9nLCAnLScpLnRvTG93ZXJDYXNlKCl9XCI+XHJcbiAgICAgICAgICAgIDxpbWcgc3JjPVwiLi9pbWFnZXMvZWxlbWVudHMve2NoYXJhY3Rlci5lbGVtZW50fS5wbmdcIiBhbHQ9XCJ7Y2hhcmFjdGVyLmVsZW1lbnR9IHN5bWJvbFwiIGNsYXNzPVwiYWJzb2x1dGUgdy04IHRvcC0xIGxlZnQtMVwiPlxyXG4gICAgICAgICAgICA8aW1nIGNsYXNzID0gXCJoLTMyIHctMzIgYWxpZ24tY2VudGVyXCIgbG9hZGluZz1cImxhenlcIiBzcmMgPSBcIi4vaW1hZ2VzL2NoYXJhY3RlcnMve2NoYXJhY3Rlci5uYW1lLnJlcGxhY2UoL1xccysvZywgJy0nKS50b0xvd2VyQ2FzZSgpfS9pY29uLWZyb250LnBuZ1wiIGFsdCA9IFwiUG9ydHJhaXQgaW1hZ2Ugb2Yge2NoYXJhY3Rlci5uYW1lfVwiPlxyXG4gICAgICAgICAgICA8cCBjbGFzcyA9IFwidGV4dC1zbSB0ZXh0LWNlbnRlclwiPntjaGFyYWN0ZXIubmFtZX08L3A+XHJcbiAgICAgICAgICAgIDxwIGNsYXNzID0gXCJ0ZXh0LXhzIHRleHQtY2VudGVyXCI+eyfirZAnLnJlcGVhdChjaGFyYWN0ZXIucmFyaXR5KX08L3A+XHJcbiAgICAgICAgPC9hPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIHsvZWFjaH1cclxuICAgIDwvZGl2PlxyXG5cclxuICAgIDwvZGl2PlxyXG48L3NlY3Rpb24+XHJcbjwvZGl2PiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW1DOEMsQ0FBQSxJQUFBLFFBQUEsaUJBQUEsR0FBUyxJQUFDLElBQUksR0FBQSxFQUFBLENBQUE7Ozs7QUFDZCxDQUFBLElBQUEsUUFBQSxHQUFBLENBQUEsR0FBRyxFQUFDLE1BQU0sZUFBQyxHQUFTLElBQUMsTUFBTSxDQUFBLEdBQUEsRUFBQSxDQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFIaEMsR0FBQSxJQUFBLENBQUEsYUFBQSxDQUFBLElBQUEsQ0FBQSxHQUFBLEVBQUEsY0FBQSxHQUFBLG9CQUFBLGlCQUFBLEdBQVMsSUFBQyxPQUFPLEdBQUEsTUFBQSxDQUFBLEVBQUEsUUFBQSxDQUFBLElBQUEsRUFBQSxLQUFBLEVBQUEsY0FBQSxDQUFBLENBQUE7QUFBYSxHQUFBLFFBQUEsQ0FBQSxJQUFBLEVBQUEsS0FBQSxFQUFBLEVBQUEsa0JBQUEsR0FBUyxJQUFDLE9BQU8sR0FBQSxTQUFBLENBQUEsQ0FBQSxDQUFBOzs7Ozt3RkFDSyxHQUFTLENBQUEsQ0FBQSxDQUFBLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFBLENBQUUsV0FBVyxFQUFBLEdBQUEsaUJBQUEsQ0FBQSxFQUFBLFFBQUEsQ0FBQSxJQUFBLEVBQUEsS0FBQSxFQUFBLGNBQUEsQ0FBQSxDQUFBO0FBQThDLEdBQUEsUUFBQSxDQUFBLElBQUEsRUFBQSxLQUFBLEVBQUEsb0JBQUEsaUJBQUEsR0FBUyxJQUFDLElBQUksQ0FBQSxDQUFBOzs7Ozs7c0RBRjFLLEdBQVMsQ0FBQSxDQUFBLENBQUEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUEsQ0FBRSxXQUFXLEVBQUEsQ0FBQSxDQUFBOzs7Ozs7R0FEckUsb0JBT00sQ0FBQSxNQUFBLEVBQUEsR0FBQSxFQUFBLE1BQUEsQ0FBQSxDQUFBO0dBTk4sb0JBS0ksQ0FBQSxHQUFBLEVBQUEsQ0FBQSxDQUFBLENBQUE7R0FKQSxvQkFBd0gsQ0FBQSxDQUFBLEVBQUEsSUFBQSxDQUFBLENBQUE7O0dBQ3hILG9CQUErTCxDQUFBLENBQUEsRUFBQSxJQUFBLENBQUEsQ0FBQTs7R0FDL0wsb0JBQXFELENBQUEsQ0FBQSxFQUFBLEVBQUEsQ0FBQSxDQUFBOzs7R0FDckQsb0JBQW1FLENBQUEsQ0FBQSxFQUFBLEVBQUEsQ0FBQSxDQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQ0FOaEUsR0FBYSxDQUFBLENBQUEsQ0FBQSxDQUFBOzs7O2dDQUFsQixNQUFJLEVBQUEsQ0FBQSxJQUFBLENBQUEsRUFBQTs7Ozs7Ozs7Ozs7YUFQaUMsaUJBQWUsQ0FBQSxDQUFBOzs7YUFDL0IsaUNBQStCLENBQUEsQ0FBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzZCQURmLGlCQUFlLENBQUEsQ0FBQTs7Ozs7NEJBQy9CLGlDQUErQixDQUFBLENBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQUo5RCxvQkF3Qk0sQ0FBQSxNQUFBLEVBQUEsSUFBQSxFQUFBLE1BQUEsQ0FBQSxDQUFBO0dBdkJOLG9CQXNCVSxDQUFBLElBQUEsRUFBQSxPQUFBLENBQUEsQ0FBQTtHQXJCVCxvQkFvQlMsQ0FBQSxPQUFBLEVBQUEsSUFBQSxDQUFBLENBQUE7R0FuQlQsb0JBQWtFLENBQUEsSUFBQSxFQUFBLEVBQUEsQ0FBQSxDQUFBOzs7R0FDL0Qsb0JBQThELENBQUEsSUFBQSxFQUFBLENBQUEsQ0FBQSxDQUFBOzs7R0FDakUsb0JBQUksQ0FBQSxJQUFBLEVBQUEsRUFBQSxDQUFBLENBQUE7O0dBSUQsb0JBV00sQ0FBQSxJQUFBLEVBQUEsSUFBQSxDQUFBLENBQUE7Ozs7Ozs7O21DQVZLLEdBQWEsQ0FBQSxDQUFBLENBQUEsQ0FBQTs7OzsrQkFBbEIsTUFBSSxFQUFBLENBQUEsSUFBQSxDQUFBLEVBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7b0NBQUosTUFBSSxDQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTdCUSxlQUFBLE9BQU8sQ0FBQyxJQUFJLEVBQUE7T0FDeEIsSUFBSSxHQUFBLE1BQUEsb0JBQUEsNkJBQUEsK09BQUEsQ0FBQTtVQUVELElBQUksRUFBQSxDQUFBOzs7Ozs7T0FLTixJQUFJLEVBQUEsR0FBQSxPQUFBLENBQUE7S0FDWCxhQUFhLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=
