import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, w as validate_each_argument, v as validate_slots, o as onMount, g as globals, e as element, t as text, a as space, f as claim_element, h as children, j as claim_text, b as detach_dev, c as claim_space, k as attr_dev, l as add_location, m as src_url_equal, n as insert_hydration_dev, p as append_hydration_dev, r as set_data_dev, q as query_selector_all, u as noop, x as destroy_each } from './client.ac88a3d9.js';
import { a as axios } from './index.b4082b9b.js';

/* src\routes\splashart\index.svelte generated by Svelte v3.48.0 */

const { console: console_1 } = globals;
const file = "src\\routes\\splashart\\index.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[1] = list[i];
	return child_ctx;
}

// (46:2) {#each tree as entry}
function create_each_block(ctx) {
	let div3;
	let div2;
	let div1;
	let h5;
	let t0_value = /*entry*/ ctx[1].path + "";
	let t0;
	let t1;
	let a;
	let div0;
	let button;
	let span;
	let t2;
	let a_href_value;
	let t3;
	let br;
	let t4;
	let img;
	let img_src_value;
	let img_alt_value;
	let t5;

	const block = {
		c: function create() {
			div3 = element("div");
			div2 = element("div");
			div1 = element("div");
			h5 = element("h5");
			t0 = text(t0_value);
			t1 = space();
			a = element("a");
			div0 = element("div");
			button = element("button");
			span = element("span");
			t2 = text("Download File");
			t3 = space();
			br = element("br");
			t4 = space();
			img = element("img");
			t5 = space();
			this.h();
		},
		l: function claim(nodes) {
			div3 = claim_element(nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			div2 = claim_element(div3_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			h5 = claim_element(div1_nodes, "H5", { class: true });
			var h5_nodes = children(h5);
			t0 = claim_text(h5_nodes, t0_value);
			h5_nodes.forEach(detach_dev);
			t1 = claim_space(div1_nodes);
			a = claim_element(div1_nodes, "A", { href: true, target: true });
			var a_nodes = children(a);
			div0 = claim_element(a_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			button = claim_element(div0_nodes, "BUTTON", { class: true });
			var button_nodes = children(button);
			span = claim_element(button_nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			t2 = claim_text(span_nodes, "Download File");
			span_nodes.forEach(detach_dev);
			button_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			a_nodes.forEach(detach_dev);
			t3 = claim_space(div1_nodes);
			br = claim_element(div1_nodes, "BR", {});
			t4 = claim_space(div1_nodes);
			img = claim_element(div1_nodes, "IMG", { src: true, loading: true, alt: true });
			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			t5 = claim_space(div3_nodes);
			div3_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h5, "class", "font-heading text-l mt-7 mb-7 text-white font-semibold");
			add_location(h5, file, 49, 5, 2202);
			attr_dev(span, "class", "relative px-5 font-semibold py-2.5 transition-all ease-in duration-75 bg-gray-900 rounded-md group-hover:bg-opacity-0");
			add_location(span, file, 53, 6, 2763);
			attr_dev(button, "class", "relative inline-flex items-center justify-center p-0.5 mb-2 mr-2 overflow-hidden text-sm font-medium rounded-lg group bg-gradient-to-br from-blue-400 to-blue-500 group-hover:from-blue-400 group-hover:to-blue-500 text-white focus:ring-4 focus:outline-none focus:ring-blue-300 dark:focus:ring-blue-800");
			add_location(button, file, 52, 5, 2439);
			attr_dev(div0, "class", "text-right");
			add_location(div0, file, 51, 4, 2408);
			attr_dev(a, "href", a_href_value = "https://raw.githubusercontent.com/dromzeh/genshin-splash-art/main/" + /*entry*/ ctx[1].path);
			attr_dev(a, "target", "_blank");
			add_location(a, file, 50, 5, 2293);
			add_location(br, file, 58, 4, 2964);
			if (!src_url_equal(img.src, img_src_value = "https://raw.githubusercontent.com/dromzeh/genshin-splash-art/main/" + /*entry*/ ctx[1].path)) attr_dev(img, "src", img_src_value);
			attr_dev(img, "loading", "lazy");
			attr_dev(img, "alt", img_alt_value = "character preview for " + /*entry*/ ctx[1].path);
			add_location(img, file, 59, 5, 2975);
			attr_dev(div1, "class", "mb-7");
			add_location(div1, file, 48, 3, 2177);
			attr_dev(div2, "class", "h-full max-w-xs mx-auto p-12 bg-gray-800 rounded-xl");
			add_location(div2, file, 47, 4, 2107);
			attr_dev(div3, "class", "w-full md:w-1/3 xl:w-auto px-4 mb-8 md:mb-0");
			add_location(div3, file, 46, 2, 2044);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, div3, anchor);
			append_hydration_dev(div3, div2);
			append_hydration_dev(div2, div1);
			append_hydration_dev(div1, h5);
			append_hydration_dev(h5, t0);
			append_hydration_dev(div1, t1);
			append_hydration_dev(div1, a);
			append_hydration_dev(a, div0);
			append_hydration_dev(div0, button);
			append_hydration_dev(button, span);
			append_hydration_dev(span, t2);
			append_hydration_dev(div1, t3);
			append_hydration_dev(div1, br);
			append_hydration_dev(div1, t4);
			append_hydration_dev(div1, img);
			append_hydration_dev(div3, t5);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*tree*/ 1 && t0_value !== (t0_value = /*entry*/ ctx[1].path + "")) set_data_dev(t0, t0_value);

			if (dirty & /*tree*/ 1 && a_href_value !== (a_href_value = "https://raw.githubusercontent.com/dromzeh/genshin-splash-art/main/" + /*entry*/ ctx[1].path)) {
				attr_dev(a, "href", a_href_value);
			}

			if (dirty & /*tree*/ 1 && !src_url_equal(img.src, img_src_value = "https://raw.githubusercontent.com/dromzeh/genshin-splash-art/main/" + /*entry*/ ctx[1].path)) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty & /*tree*/ 1 && img_alt_value !== (img_alt_value = "character preview for " + /*entry*/ ctx[1].path)) {
				attr_dev(img, "alt", img_alt_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div3);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(46:2) {#each tree as entry}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t0;
	let section;
	let div2;
	let h1;
	let t1;
	let t2;
	let p0;
	let t3;
	let t4;
	let p1;
	let t5;
	let a0;
	let t6;
	let t7;
	let br0;
	let t8;
	let br1;
	let t9;
	let t10;
	let br2;
	let t11;
	let div0;
	let a1;
	let button;
	let span;
	let t12;
	let t13;
	let br3;
	let t14;
	let div1;
	let each_value = /*tree*/ ctx[0];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			t0 = space();
			section = element("section");
			div2 = element("div");
			h1 = element("h1");
			t1 = text("Character Splash Art");
			t2 = space();
			p0 = element("p");
			t3 = text("Contains character splash art with and without the background.");
			t4 = space();
			p1 = element("p");
			t5 = text("These are manually updated from a ");
			a0 = element("a");
			t6 = text("github repository");
			t7 = text(" & it may take from 0-24 hours for new parts to appear.");
			br0 = element("br");
			t8 = text("The preview images may take a while to load dependant on your internet connection.");
			br1 = element("br");
			t9 = text("Clicking 'Download File' will take you to a new page where you can save, copy, or download the file.");
			t10 = space();
			br2 = element("br");
			t11 = space();
			div0 = element("div");
			a1 = element("a");
			button = element("button");
			span = element("span");
			t12 = text("Download All Files");
			t13 = space();
			br3 = element("br");
			t14 = space();
			div1 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all('[data-svelte=\"svelte-1u6m2ok\"]', document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			div2 = claim_element(section_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			h1 = claim_element(div2_nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			t1 = claim_text(h1_nodes, "Character Splash Art");
			h1_nodes.forEach(detach_dev);
			t2 = claim_space(div2_nodes);
			p0 = claim_element(div2_nodes, "P", { class: true });
			var p0_nodes = children(p0);
			t3 = claim_text(p0_nodes, "Contains character splash art with and without the background.");
			p0_nodes.forEach(detach_dev);
			t4 = claim_space(div2_nodes);
			p1 = claim_element(div2_nodes, "P", { class: true });
			var p1_nodes = children(p1);
			t5 = claim_text(p1_nodes, "These are manually updated from a ");
			a0 = claim_element(p1_nodes, "A", { href: true, class: true });
			var a0_nodes = children(a0);
			t6 = claim_text(a0_nodes, "github repository");
			a0_nodes.forEach(detach_dev);
			t7 = claim_text(p1_nodes, " & it may take from 0-24 hours for new parts to appear.");
			br0 = claim_element(p1_nodes, "BR", {});
			t8 = claim_text(p1_nodes, "The preview images may take a while to load dependant on your internet connection.");
			br1 = claim_element(p1_nodes, "BR", {});
			t9 = claim_text(p1_nodes, "Clicking 'Download File' will take you to a new page where you can save, copy, or download the file.");
			p1_nodes.forEach(detach_dev);
			t10 = claim_space(div2_nodes);
			br2 = claim_element(div2_nodes, "BR", {});
			t11 = claim_space(div2_nodes);
			div0 = claim_element(div2_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			a1 = claim_element(div0_nodes, "A", { href: true });
			var a1_nodes = children(a1);
			button = claim_element(a1_nodes, "BUTTON", { class: true });
			var button_nodes = children(button);
			span = claim_element(button_nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			t12 = claim_text(span_nodes, "Download All Files");
			span_nodes.forEach(detach_dev);
			button_nodes.forEach(detach_dev);
			a1_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			t13 = claim_space(div2_nodes);
			br3 = claim_element(div2_nodes, "BR", {});
			t14 = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div1_nodes);
			}

			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "splash art | wanderer.moe - a genshin database";
			attr_dev(h1, "class", "text-white font-semibold gifont");
			add_location(h1, file, 28, 1, 717);
			attr_dev(p0, "class", "text-gray-400");
			add_location(p0, file, 29, 1, 791);
			attr_dev(a0, "href", "https://github.com/dromzeh/genshin-splash-art");
			attr_dev(a0, "class", "hover:underline");
			add_location(a0, file, 30, 70, 956);
			add_location(br0, file, 30, 230, 1116);
			add_location(br1, file, 30, 316, 1202);
			attr_dev(p1, "class", "text-gray-400 text-sm");
			add_location(p1, file, 30, 1, 887);
			add_location(br2, file, 31, 1, 1313);
			attr_dev(span, "class", "relative px-5 font-semibold py-2.5 transition-all ease-in duration-75 bg-gray-900 rounded-md group-hover:bg-opacity-0");
			add_location(span, file, 35, 2, 1758);
			attr_dev(button, "class", "relative inline-flex items-center justify-center p-0.5 mb-2 mr-2 overflow-hidden text-sm font-medium rounded-lg group bg-gradient-to-br from-blue-400 to-blue-500 group-hover:from-blue-400 group-hover:to-blue-500 text-white focus:ring-4 focus:outline-none focus:ring-blue-300 dark:focus:ring-blue-800");
			add_location(button, file, 34, 1, 1438);
			attr_dev(a1, "href", "https://github.com/dromzeh/genshin-splash-art/archive/refs/heads/main.zip");
			add_location(a1, file, 33, 1, 1349);
			attr_dev(div0, "class", "text-right");
			add_location(div0, file, 32, 1, 1320);
			add_location(br3, file, 41, 1, 1955);
			attr_dev(div1, "class", "flex flex-wrap justify-center gap-5");
			add_location(div1, file, 43, 1, 1964);
			attr_dev(div2, "class", "container px-4 mx-auto");
			add_location(div2, file, 27, 1, 678);
			attr_dev(section, "class", "py-24 md:py-40");
			add_location(section, file, 26, 0, 643);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, t0, anchor);
			insert_hydration_dev(target, section, anchor);
			append_hydration_dev(section, div2);
			append_hydration_dev(div2, h1);
			append_hydration_dev(h1, t1);
			append_hydration_dev(div2, t2);
			append_hydration_dev(div2, p0);
			append_hydration_dev(p0, t3);
			append_hydration_dev(div2, t4);
			append_hydration_dev(div2, p1);
			append_hydration_dev(p1, t5);
			append_hydration_dev(p1, a0);
			append_hydration_dev(a0, t6);
			append_hydration_dev(p1, t7);
			append_hydration_dev(p1, br0);
			append_hydration_dev(p1, t8);
			append_hydration_dev(p1, br1);
			append_hydration_dev(p1, t9);
			append_hydration_dev(div2, t10);
			append_hydration_dev(div2, br2);
			append_hydration_dev(div2, t11);
			append_hydration_dev(div2, div0);
			append_hydration_dev(div0, a1);
			append_hydration_dev(a1, button);
			append_hydration_dev(button, span);
			append_hydration_dev(span, t12);
			append_hydration_dev(div2, t13);
			append_hydration_dev(div2, br3);
			append_hydration_dev(div2, t14);
			append_hydration_dev(div2, div1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div1, null);
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*tree*/ 1) {
				each_value = /*tree*/ ctx[0];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div1, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(section);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Splashart', slots, []);
	let tree = [];

	onMount(async () => {
		try {
			let response = await axios.get('https://api.github.com/repos/dromzeh/genshin-splash-art/git/trees/main?recursive=1').then(function (response) {
				$$invalidate(0, tree = response.data.tree);
			}); //console.log(tree);
		} catch(e) {
			console.error('Error fetching data');
		}
	});

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1.warn(`<Splashart> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({ onMount, axios, tree });

	$$self.$inject_state = $$props => {
		if ('tree' in $$props) $$invalidate(0, tree = $$props.tree);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [tree];
}

class Splashart extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Splashart",
			options,
			id: create_fragment.name
		});
	}
}

export { Splashart as default };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
