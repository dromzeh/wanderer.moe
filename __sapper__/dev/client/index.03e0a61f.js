import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, w as validate_each_argument, v as validate_slots, e as element, a as space, t as text, f as claim_element, h as children, c as claim_space, j as claim_text, b as detach_dev, k as attr_dev, m as src_url_equal, l as add_location, n as insert_hydration_dev, p as append_hydration_dev, u as noop, q as query_selector_all, x as destroy_each } from './client.ac88a3d9.js';

/* src\routes\artifacts\index.svelte generated by Svelte v3.48.0 */

const file = "src\\routes\\artifacts\\index.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[1] = list[i];
	return child_ctx;
}

// (63:8) {#each allArtifacts as artifact}
function create_each_block(ctx) {
	let div;
	let a;
	let img;
	let img_src_value;
	let t0;
	let p;
	let t1_value = /*artifact*/ ctx[1] + "";
	let t1;
	let t2;

	const block = {
		c: function create() {
			div = element("div");
			a = element("a");
			img = element("img");
			t0 = space();
			p = element("p");
			t1 = text(t1_value);
			t2 = space();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			a = claim_element(div_nodes, "A", { href: true });
			var a_nodes = children(a);

			img = claim_element(a_nodes, "IMG", {
				class: true,
				loading: true,
				src: true,
				alt: true
			});

			t0 = claim_space(a_nodes);
			p = claim_element(a_nodes, "P", { class: true });
			var p_nodes = children(p);
			t1 = claim_text(p_nodes, t1_value);
			p_nodes.forEach(detach_dev);
			a_nodes.forEach(detach_dev);
			t2 = claim_space(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(img, "class", "mx-auto h-32 w-32");
			attr_dev(img, "loading", "lazy");
			if (!src_url_equal(img.src, img_src_value = "./images/artifacts/" + /*artifact*/ ctx[1].replace(/\s+/g, '-').toLowerCase() + "/flower.png")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "image of an artifact from the artifact set " + /*artifact*/ ctx[1]);
			add_location(img, file, 65, 12, 1803);
			attr_dev(p, "class", "text-sm text-center");
			add_location(p, file, 66, 12, 2011);
			attr_dev(a, "href", "/artifacts/" + /*artifact*/ ctx[1].replace(/\s+/g, '-').toLowerCase());
			add_location(a, file, 64, 8, 1722);
			attr_dev(div, "class", "bg-gray-800 hover:scale-105 rounded-lg p-2 justify-center text-gray-400 font-semibold hover:text-white");
			add_location(div, file, 63, 8, 1594);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, div, anchor);
			append_hydration_dev(div, a);
			append_hydration_dev(a, img);
			append_hydration_dev(a, t0);
			append_hydration_dev(a, p);
			append_hydration_dev(p, t1);
			append_hydration_dev(div, t2);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(63:8) {#each allArtifacts as artifact}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t0;
	let div2;
	let section;
	let div1;
	let h1;
	let t1;
	let t2;
	let p;
	let t3;
	let t4;
	let br;
	let t5;
	let div0;
	let each_value = /*allArtifacts*/ ctx[0];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			t0 = space();
			div2 = element("div");
			section = element("section");
			div1 = element("div");
			h1 = element("h1");
			t1 = text("Artifact Index");
			t2 = space();
			p = element("p");
			t3 = text("List of Artifacts");
			t4 = space();
			br = element("br");
			t5 = space();
			div0 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all('[data-svelte=\"svelte-st209w\"]', document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			div2 = claim_element(nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			section = claim_element(div2_nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			div1 = claim_element(section_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			h1 = claim_element(div1_nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			t1 = claim_text(h1_nodes, "Artifact Index");
			h1_nodes.forEach(detach_dev);
			t2 = claim_space(div1_nodes);
			p = claim_element(div1_nodes, "P", { class: true });
			var p_nodes = children(p);
			t3 = claim_text(p_nodes, "List of Artifacts");
			p_nodes.forEach(detach_dev);
			t4 = claim_space(div1_nodes);
			br = claim_element(div1_nodes, "BR", {});
			t5 = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div0_nodes);
			}

			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			section_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "artifacts | wanderer.moe - a genshin database";
			attr_dev(h1, "class", "text-white font-semibold gifont");
			add_location(h1, file, 55, 1, 1253);
			attr_dev(p, "class", "text-gray-400");
			add_location(p, file, 56, 4, 1324);
			add_location(br, file, 57, 1, 1375);
			attr_dev(div0, "class", "grid grid-cols-2 md:grid-cols-6 lg:grid-cols-8 gap-3");
			add_location(div0, file, 61, 4, 1476);
			attr_dev(div1, "class", "container px-4 mx-auto");
			add_location(div1, file, 54, 1, 1214);
			attr_dev(section, "class", "py-24 md:py-40");
			add_location(section, file, 53, 0, 1179);
			attr_dev(div2, "class", "flex flex-col min-h-screen");
			add_location(div2, file, 52, 0, 1135);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, t0, anchor);
			insert_hydration_dev(target, div2, anchor);
			append_hydration_dev(div2, section);
			append_hydration_dev(section, div1);
			append_hydration_dev(div1, h1);
			append_hydration_dev(h1, t1);
			append_hydration_dev(div1, t2);
			append_hydration_dev(div1, p);
			append_hydration_dev(p, t3);
			append_hydration_dev(div1, t4);
			append_hydration_dev(div1, br);
			append_hydration_dev(div1, t5);
			append_hydration_dev(div1, div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div0, null);
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*allArtifacts*/ 1) {
				each_value = /*allArtifacts*/ ctx[0];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div0, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div2);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Artifacts', slots, []);

	let allArtifacts = [
		'Adventurer',
		'Archaic Petra',
		'Berserker',
		'Blizzard Strayer',
		'Bloodstained Chivalry',
		'Brave Heart',
		'Crimson Witch of Flames',
		'Defenders Will',
		'Echoes of an Offering',
		'Emblem of Severed Fate',
		'Gambler',
		'Gladiators Finale',
		'Heart of Depth',
		'Husk of Opulent Dreams',
		'Instructor',
		'Lavawalker',
		'Lucky Dog',
		'Maiden Beloved',
		'Martial Artist',
		'Noblesse Oblige',
		'Ocean-Hued Clam',
		'Pale Flame',
		'Prayers for Destiny',
		'Prayers for Illumination',
		'Prayers for Wisdom',
		'Prayers to Springtime',
		'Resolution of Sojourner',
		'Retracting Bolide',
		'Scholar',
		'Shimenawas Reminiscence',
		'Tenacity of the Millelith',
		'The Exile',
		'Thundering Fury',
		'Thundersoother',
		'Tiny Miracle',
		'Traveling Doctor',
		'Vermillion Hereafter',
		'Viridescent Venerer',
		'Wanderers Troupe'
	];

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Artifacts> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({ allArtifacts });

	$$self.$inject_state = $$props => {
		if ('allArtifacts' in $$props) $$invalidate(0, allArtifacts = $$props.allArtifacts);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [allArtifacts];
}

class Artifacts extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Artifacts",
			options,
			id: create_fragment.name
		});
	}
}

export { Artifacts as default };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguMDNlMGE2MWYuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvYXJ0aWZhY3RzL2luZGV4LnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0PlxyXG5sZXQgYWxsQXJ0aWZhY3RzID0gW1xyXG4gICAgJ0FkdmVudHVyZXInLFxyXG4gICAgJ0FyY2hhaWMgUGV0cmEnLFxyXG4gICAgJ0JlcnNlcmtlcicsXHJcbiAgICAnQmxpenphcmQgU3RyYXllcicsXHJcbiAgICAnQmxvb2RzdGFpbmVkIENoaXZhbHJ5JyxcclxuICAgICdCcmF2ZSBIZWFydCcsXHJcbiAgICAnQ3JpbXNvbiBXaXRjaCBvZiBGbGFtZXMnLFxyXG4gICAgJ0RlZmVuZGVycyBXaWxsJyxcclxuICAgICdFY2hvZXMgb2YgYW4gT2ZmZXJpbmcnLFxyXG4gICAgJ0VtYmxlbSBvZiBTZXZlcmVkIEZhdGUnLFxyXG4gICAgJ0dhbWJsZXInLFxyXG4gICAgJ0dsYWRpYXRvcnMgRmluYWxlJyxcclxuICAgICdIZWFydCBvZiBEZXB0aCcsXHJcbiAgICAnSHVzayBvZiBPcHVsZW50IERyZWFtcycsXHJcbiAgICAnSW5zdHJ1Y3RvcicsXHJcbiAgICAnTGF2YXdhbGtlcicsXHJcbiAgICAnTHVja3kgRG9nJyxcclxuICAgICdNYWlkZW4gQmVsb3ZlZCcsXHJcbiAgICAnTWFydGlhbCBBcnRpc3QnLFxyXG4gICAgJ05vYmxlc3NlIE9ibGlnZScsXHJcbiAgICAnT2NlYW4tSHVlZCBDbGFtJyxcclxuICAgICdQYWxlIEZsYW1lJyxcclxuICAgICdQcmF5ZXJzIGZvciBEZXN0aW55JyxcclxuICAgICdQcmF5ZXJzIGZvciBJbGx1bWluYXRpb24nLFxyXG4gICAgJ1ByYXllcnMgZm9yIFdpc2RvbScsXHJcbiAgICAnUHJheWVycyB0byBTcHJpbmd0aW1lJyxcclxuICAgICdSZXNvbHV0aW9uIG9mIFNvam91cm5lcicsXHJcbiAgICAnUmV0cmFjdGluZyBCb2xpZGUnLFxyXG4gICAgJ1NjaG9sYXInLFxyXG4gICAgJ1NoaW1lbmF3YXMgUmVtaW5pc2NlbmNlJyxcclxuICAgICdUZW5hY2l0eSBvZiB0aGUgTWlsbGVsaXRoJyxcclxuICAgICdUaGUgRXhpbGUnLFxyXG4gICAgJ1RodW5kZXJpbmcgRnVyeScsXHJcbiAgICAnVGh1bmRlcnNvb3RoZXInLFxyXG4gICAgJ1RpbnkgTWlyYWNsZScsXHJcbiAgICAnVHJhdmVsaW5nIERvY3RvcicsXHJcbiAgICAnVmVybWlsbGlvbiBIZXJlYWZ0ZXInLFxyXG4gICAgJ1ZpcmlkZXNjZW50IFZlbmVyZXInLFxyXG4gICAgJ1dhbmRlcmVycyBUcm91cGUnXHJcbl1cclxuXHJcbjwvc2NyaXB0PlxyXG5cclxuPHN0eWxlPlxyXG48L3N0eWxlPlxyXG5cclxuPHN2ZWx0ZTpoZWFkPlxyXG4gICAgPHRpdGxlPmFydGlmYWN0cyB8IHdhbmRlcmVyLm1vZSAtIGEgZ2Vuc2hpbiBkYXRhYmFzZTwvdGl0bGU+XHJcbjwvc3ZlbHRlOmhlYWQ+XHJcblxyXG48ZGl2IGNsYXNzID0gXCJmbGV4IGZsZXgtY29sIG1pbi1oLXNjcmVlblwiPlxyXG48c2VjdGlvbiBjbGFzcz1cInB5LTI0IG1kOnB5LTQwXCI+XHJcblx0PGRpdiBjbGFzcz1cImNvbnRhaW5lciBweC00IG14LWF1dG9cIj5cclxuXHQ8aDEgY2xhc3MgPSBcInRleHQtd2hpdGUgZm9udC1zZW1pYm9sZCBnaWZvbnRcIj5BcnRpZmFjdCBJbmRleDwvaDE+XHJcbiAgICA8cCBjbGFzcyA9IFwidGV4dC1ncmF5LTQwMFwiPkxpc3Qgb2YgQXJ0aWZhY3RzPC9wPlxyXG5cdDxicj5cclxuXHJcbiAgICA8IS0tIGFydGlmYWN0IGNhcmRzIC0tPlxyXG4gICAgPCEtLSB0b2RvOiBjaGFuZ2UgdGhpcyBsYXlvdXQgbWF5YmUgaW4gdGhlIGZ1dHVyZT8gLS0+XHJcbiAgICA8ZGl2IGNsYXNzPVwiZ3JpZCBncmlkLWNvbHMtMiBtZDpncmlkLWNvbHMtNiBsZzpncmlkLWNvbHMtOCBnYXAtM1wiPlxyXG4gICAgICAgIHsjZWFjaCBhbGxBcnRpZmFjdHMgYXMgYXJ0aWZhY3R9XHJcbiAgICAgICAgPGRpdiBjbGFzcyA9IFwiYmctZ3JheS04MDAgaG92ZXI6c2NhbGUtMTA1IHJvdW5kZWQtbGcgcC0yIGp1c3RpZnktY2VudGVyIHRleHQtZ3JheS00MDAgZm9udC1zZW1pYm9sZCBob3Zlcjp0ZXh0LXdoaXRlXCI+XHJcbiAgICAgICAgPGEgaHJlZj1cIi9hcnRpZmFjdHMve2FydGlmYWN0LnJlcGxhY2UoL1xccysvZywgJy0nKS50b0xvd2VyQ2FzZSgpfVwiPlxyXG4gICAgICAgICAgICA8aW1nIGNsYXNzID0gXCJteC1hdXRvIGgtMzIgdy0zMlwiIGxvYWRpbmc9XCJsYXp5XCIgc3JjID0gXCIuL2ltYWdlcy9hcnRpZmFjdHMve2FydGlmYWN0LnJlcGxhY2UoL1xccysvZywgJy0nKS50b0xvd2VyQ2FzZSgpfS9mbG93ZXIucG5nXCIgYWx0ID0gXCJpbWFnZSBvZiBhbiBhcnRpZmFjdCBmcm9tIHRoZSBhcnRpZmFjdCBzZXQge2FydGlmYWN0fVwiPlxyXG4gICAgICAgICAgICA8cCBjbGFzcyA9IFwidGV4dC1zbSB0ZXh0LWNlbnRlclwiPnthcnRpZmFjdH08L3A+XHJcbiAgICAgICAgPC9hPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIHsvZWFjaH1cclxuICAgIDwvZGl2PlxyXG5cclxuICAgIDwvZGl2PlxyXG48L3NlY3Rpb24+XHJcbjwvZGl2PiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs2QkFrRThDLEdBQVEsQ0FBQSxDQUFBLENBQUEsR0FBQSxFQUFBLENBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRGlDLEdBQUEsSUFBQSxDQUFBLGFBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxFQUFBLGFBQUEsR0FBQSxxQkFBQSxnQkFBQSxHQUFRLElBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsV0FBVyxFQUFBLEdB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
