// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model AuthUser {
  id                   String           @id @unique
  auth_session         AuthSession[]
  auth_key             AuthKey[]
  avatar_url           String? // TODO: create a default avatar on the CDN
  username             String           @unique
  email                String           @unique
  email_verified       Int              @default(0)
  pronouns             String?
  verified             Int              @default(0)
  bio                  String           @default("")
  // followers          // stores user(s) id as an array
  // following          // stores user(s) id as an array
  // user_uploads       // stores each asset id a user has uploaded as an array
  // connections        // stores games && username/id
  roles                Role[]           @relation("UserRole")
  self_assignable_tags SelfAssignTags[] @relation("UserSelfAssignTags")
  selfAssignTagsId     Int?

  @@map("auth_user")
}

model AuthSession {
  id             String   @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  auth_user      AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_session")
}

model AuthKey {
  id              String   @id @unique
  hashed_password String?
  user_id         String
  primary_key     Boolean
  expires         BigInt?
  auth_user       AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_key")
}

model Email {
  id            String   @id @unique
  subject       String
  email_address String
  date_sent     DateTime
  content       String

  @@map("email")
}

model Tags {
  id   Int    @id @default(autoincrement())
  name String

  @@index([name])
}

model Games {
  id               Int    @id @default(autoincrement())
  name             String
  asset_categories String

  @@index([id])
}

model OC_Generators {
  game          String            @id
  data          String
  uploaded_by   String            @default("System")
  uploaded_date String
  status        OCGeneratorStatus @default(pending)
  view_count    Int               @default(0)

  @@index([game])
}

model Assets {
  id             Int         @id @default(autoincrement())
  name           String
  game           String
  asset          String
  url            String
  status         AssetStatus @default(pending)
  uploaded_by    String
  uploaded_date  String
  view_count     Int         @default(0)
  download_count Int         @default(0)
  file_size      Int

  @@index([id])
}

model Role {
  name  String     @id
  users AuthUser[] @relation("UserRole")
}

enum RoleNames {
  user
  plus
  staff
  developer
  creator
}

model SelfAssignTags {
  id    Int        @id @default(autoincrement())
  name  String
  users AuthUser[] @relation("UserSelfAssignTags")

  @@index([name])
}

enum SelfAssignTagsNames {
  designer
  developer
  artist
  writer
  musician
}

enum AssetStatus {
  pending
  approved
  rejected
}

enum OCGeneratorStatus {
  pending
  approved
  rejected
}
