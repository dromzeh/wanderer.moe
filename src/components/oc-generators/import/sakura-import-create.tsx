import { Button } from '@/components/ui/button'
import { Import } from 'lucide-react'
import { DataHandlerProps } from '@/interfaces/oc-generator/oc-generator'
import { z } from 'zod'
import {
    Dialog,
    DialogContent,
    DialogDescription,
    DialogFooter,
    DialogHeader,
    DialogTitle,
    DialogTrigger,
} from '@/components/ui/dialog'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { useToast } from '@/components/ui/use-toast'
import data from '@/lib/names/en/female.json'

export const MESSAGE_ROLES = ['user', 'assistant'] as const

export const SFW_CATEGORIES = [
    'Male',
    'Female',
    'Anime',
    'Movies & TV',
    'Yandere',
    'Tsundere',
    'Gay',
    'Lesbian',
    'Non-binary',
    'Vampire',
    'OC',
    'Horror',
    'Video Games',
] as const

export const VOICE_TYPES = [
    'Male 1',
    'Male 2',
    'Male 3',
    'Male 4',
    'Male 5',
    'Male 6',
    'Female 1',
] as const

const CreateSchema = z
    .object({
        imageUri: z.string(),
        name: z.string(),
        description: z.string(),
        persona: z.string(),
        scenario: z.string(),
        exampleConversation: z.array(
            z.object({
                role: z.enum(MESSAGE_ROLES),
                content: z.string(),
            }),
        ),
        firstMessage: z.string(),
        nsfw: z.boolean(),
        voiceType: z.enum(VOICE_TYPES).optional(),
        notes: z.string().optional(),
        categories: z.array(z.enum([...SFW_CATEGORIES])),
    })
    .partial()

interface ImportToSakuraFMProps {
    characterName: string
    options: {
        name: string
        locked: boolean
        currentOption: string
    }[]
}

function ImportData(options: ImportToSakuraFMProps['options'], name: string) {
    const data = {
        name,
        description: `${name}`,
        persona: `${name}`,
        scenario: `${name}`,
        firstMessage: `${name}`,
        nsfw: false,
        notes: `Characteristics for ${name} generated by wanderer.moe's OCs generator.`,
        categories: ['OC'],
    }

    const validData = CreateSchema.safeParse(data)
    if (!validData.success) {
        console.error(validData.error)
        return
    }

    const jsonData = JSON.stringify(validData.data)

    const base64Data = btoa(jsonData)

    window.open(`https://www.sakura.fm/create?import=${base64Data}`, '_blank')
    return
}

export function ImportToSakuraFM(options: ImportToSakuraFMProps) {
    const { toast } = useToast()

    async function handleSubmit(e: React.FormEvent<HTMLFormElement>) {
        ImportData(options.options, options.characterName)
    }

    return (
        <Dialog>
            <DialogTrigger asChild>
                <Button
                    variant={'outline'}
                    className="flex w-full flex-row items-center gap-2">
                    <Import size={16} />
                    Create Character on SakuraFM
                </Button>
            </DialogTrigger>
            <DialogContent className="sm:max-w-[425px]">
                <form onSubmit={handleSubmit}>
                    <DialogHeader>
                        <DialogTitle>Create Character on SakuraFM</DialogTitle>
                        <DialogDescription>
                            You will be redirected to SakuraFM to create your
                            character. Some information you generated for{' '}
                            {options.characterName} will be pre-filled.
                        </DialogDescription>
                    </DialogHeader>
                    <DialogFooter className="mt-2 gap-2">
                        <Button variant="outline">Cancel</Button>
                        <Button>Import</Button>
                    </DialogFooter>
                </form>
            </DialogContent>
        </Dialog>
    )
}
